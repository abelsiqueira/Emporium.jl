var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Emporium","category":"page"},{"location":"#Emporium","page":"Home","title":"Emporium","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Emporium.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Emporium]","category":"page"},{"location":"#Emporium.check_and_fix_compliance","page":"Home","title":"Emporium.check_and_fix_compliance","text":"check_and_fix_compliance(template_folder, file_list, workdir = \"cloned_repos\"; options...)\n\nCompares the list of files given in file_list for every package in workdir with the same files in template_folder. If some cases, the template files have a package name placeholder that needs to be replaced by the actual package name. Set this with the keyword variable template_pkg_name.\n\nKeywords arguments\n\nauth: GitHub.jl authentication token (use GitHub.authenticate(YOUR_TOKEN)).\ncheck_only::Bool: If true, will display only the comparison, without fixing anything (default: false).\nclose_older_compliance_prs::Bool: If create_pr is enabled, and this is true, it will look for other PRs with the same branch name prefix and close them (default: true).\ncreate_pr::Bool: Whether to create a pull request, or just the commits. Requires a valid auth key (default: false).\nfilter_jl_ending::Bool: Whether to check only folders ending in .jl or all folders (default: true).\ninfo_header_frequency::Int: How often to show the header with the file names (default: 5).\nowner::String: If create_pr is true, then this is the owner of the repo, and can't be empty. The full url of the repo is https://github.com/$owner/$pkg, where pkg is the folder name (default: \"\").\nrename_these_files::Vector{Pair{String, String}}: List of files to be renamed, if they exist. This will be done before fixing the content with new files. Each pair is of the form old => new (default: []).\ntemplate_pkg_name::String: The placeholder for the package name in the files.\n\nExtended help\n\nExamples\n\njulia> clone_organization_repos(\"MyOrg\", \"cloned_repos\", exclude=[\"MyTemplate.jl\"]) # Clone from my org into repos\njulia> run(`git clone https://github.com/MyOrg/MyTemplate.jl`)\njulia> auth = GitHub.authenticate(ENV[\"GITHUB_TOKEN\"])\njulia> check_and_fix_compliance(\n           \"MyTemplate.jl\",\n           [\".JuliaFormatter.jl\", \".github/workflows/CI.yml\"],\n           \"cloned_repos\",\n           auth = auth,\n           check_only = false,\n           close_older_compliance_prs = true,\n           create_pr = true,\n           owner = \"MyOrg\",\n           rename_these_files = [\".github/workflows/ci.yml\"  => \".github/workflows/CI.yml\"],\n           template_pkg_name = \"MyTemplate\",\n       )\n\n\n\n\n\n","category":"function"},{"location":"#Emporium.clone_organization_repos","page":"Home","title":"Emporium.clone_organization_repos","text":"clone_organization_repos(org; options...)\nclone_organization_repos(org, dest; options...)\n\nClone all repos from the GitHub organization org into folder dest. If dest is not specified, used dest = org.\n\nOptions:\n\nauth = AnonymousAuth(): Authentication token (GitHub.authenticate(ENV[\"GITHUB_AUTH\"]))\ndry_run = false: Don't clone the repos, only list them.\nexclude = []: Exclude listed repos.\n\n\n\n\n\n","category":"function"},{"location":"#Emporium.create_pull_request-NTuple{4, Any}","page":"Home","title":"Emporium.create_pull_request","text":"pr = create_pull_request(repo, title, body, head; options...)\n\nVery thin layer over GitHub.createpullrequest. Creates a pull request to repo from branch head to base base (defaults to main). The title and body must be supplied.\n\nOptions\n\nauth = GitHub.AnonymousAuth(): GitHub authentication token\nbase = \"main\": Main branch where you want to merge the changes\ndry_run = false: Test instead of actually running\n\n\n\n\n\n","category":"method"},{"location":"#Emporium.create_test_project_from_main_project-Tuple{}","page":"Home","title":"Emporium.create_test_project_from_main_project","text":"create_test_project_from_main_project()\n\nCreate test/Project.toml from the sections [extras] and [targets] in Project.toml.\n\n\n\n\n\n","category":"method"},{"location":"#Emporium.git_has_modifications_to_stage-Tuple{}","page":"Home","title":"Emporium.git_has_modifications_to_stage","text":"git_has_modifications_to_stage()\n\nCheck for modified unstaged files.\n\n\n\n\n\n","category":"method"},{"location":"#Emporium.git_has_staged_to_commit-Tuple{}","page":"Home","title":"Emporium.git_has_staged_to_commit","text":"git_has_staged_to_commit()\n\nCheck for staged files\n\n\n\n\n\n","category":"method"},{"location":"#Emporium.git_has_to_commit-Tuple{}","page":"Home","title":"Emporium.git_has_to_commit","text":"git_has_to_commit()\n\nCheck for unstaged or staged modifications to commit. Doesn't check for untracked files.\n\n\n\n\n\n","category":"method"},{"location":"#Emporium.run_on_folders-Tuple{Any, Any}","page":"Home","title":"Emporium.run_on_folders","text":"run_on_folders(action, folders)\nrun_on_folders(action, folders)\n\nRun action into each folder in folders. action must be either:\n\na Cmd (like ls, or git status).\na callable with no mandatory arguments with some keyword arguments, but that accepts arbitrary commands.\n\nThe following keyword arguments will be passed to action:\n\nbasename: Folder name stripped of dirs before it.\ndirname: Complement of basename.\nindex: Index of traversal in folders, obtained from enumerate(folder_list).\n\nIf you think of something useful to add to this list, let me know.\n\nOptions\n\ndry_run = false: Don't run the action, just print.\nrethrow_exception = false: If an exception is thrown by the action, rethrow it.\n\nExamples\n\nUpdating a file throught your cloned repos\n\nYou want to have the same configuration in all your repos, that are cloned into folder \"cloned-repos\".\n\njulia> myfile = joinpath(pwd(), \".editorconfig\")\njulia> folders = readdir(\"cloned-repos\", join=true)\njulia> run_on_folders(`cp $myfile .`, folders)\njulia> run_on_folders((;kws...) ->\n       if git_has_to_commit() && run(`git commit -am \"Add or update\"`), folders)\njulia> run_on_folders(`git push`, folders)\n\n\n\n\n\n","category":"method"}]
}
